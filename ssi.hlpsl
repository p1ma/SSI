%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Projet de SSI:
%% Auteurs: Pierre-Marie JUNGES, Florent NOSARI
%% Sujet: Gestion à distance d'un radar automatique de route
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Description du protocole d'échange
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle gestionnaire, initiant le protocole
%
% Connaissances initiales du gestionnaire:
% S: Le serveur d'authentification
% R: Le radar a qui envoyé des ordres
% PKs: La clé publique du serveur d'authentification
% PKg: La clé publique du gestionnaire
% C: La commande a envoyer

role gestionnaire (
    G, R: agent,
    PKg, PKs: public_key,      
    Snd, Rcv: channel(dy))  
played_by G def=

  local State: nat,
	Ng, Nr, Nc, Res: text,
	KSession: symmetric_key,
	PKr: public_key

  init State := 0

  transition  
        1. State=0 /\ Rcv(start)
	   =|> State':=1 /\ Ng':=new() /\ Snd({G.R.Ng'})
	2. State=1 /\ Rcv({KSession'.Ng.Nr'}_PKg)
	   =|> State':=2 /\ Nc':=new() /\ Snd({Nc'.Nr'}_KSession')
	3. State=2 /\ Rcv({Res'.Nr'}_KSession)
   	   =|> State':=3
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle radar
%
% Connaissances initiales du radar:
% S: Le serveur d'authentification
% PKs: La clé publique du serveur d'authentification
% PKr: La clé publique du radar

role radar (
    R: agent,            
    PKr, PKs: public_key,      
    Snd, Rcv: channel(dy))
played_by R def=

  local State: nat,
	G: agent,
	KSession: symmetric_key,
	PKg: public_key,
	Ng, Nr, Nc, Res: text

  init State:=0
  
  transition
        1. State=0 /\ Rcv({G'.PKg'.Ng'.{KSession'}_inv(PKs)}_PKr')
	   =|> State':=1 /\ Nr':=new()
	       /\ Snd({KSession'.Ng'.Nr'}_PKg')
	       /\ secret(Nr', snr, {G.R})
	2. State=1 /\ Rcv({Nc'.Nr}_KSession)
	   =|> State':=2 /\ Res':=new() /\ Nr':= new()
	       /\ Snd({Res'.Nr'}_KSession)

   
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle serveur
%
role server (S: agent,
	PKs: public_key,
	KeyMap: (agent.public_key) set,
	Snd, Rcv: channel(dy))
played_by S def=

  local G, R: agent,
  	Ng, Nr, Ns: text,
	PKg, PKr: public_key,
	KSession: symmetric_key

  transition
	1. Rcv({G'.R'.Ng'}_PKs) /\ in(G'.PKg', KeyMap) /\ in(R'.PKr', KeyMap)
	   =|> KSession':=new() /\ secret(KSession', cle, {G.R.S}) /\ Snd({G'.PKg'.Ng'.{KSession'}_inv(PKs)}_PKr')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant une session
role session(G, R: agent,
	PKg, PKr, PKs: public_key,
	Snd, Rcv: channel(dy))
def=

  composition 
	gestionnaire(G, R, PKg, PKs, Snd, Rcv)
	/\ radar(R, PKr, PKs, Snd, Rcv)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant le scenario à exécuter
role environment() def=

	local KeyMapS: (agent.public_key) set,
		Snd, Rcv: channel(dy)
	
    	const g, r, s, i: agent,
		pkg, pkr, pks, pki: public_key,
		cle, snr: protocol_id

	init KeyMapS:= {g.pkg, r.pkr}

	intruder_knowledge = {g, r, s, pkg, pkr, pks, pki, inv(pki)}

    	composition
		server(s, pks, KeyMapS, Snd, Rcv)
		/\ session(g, r, pkg, pkr, pks, Snd, Rcv)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% pour l'instant, pas de section goal ici (donc pas de propriété à vérifier)

goal

	secrecy_of cle, snr

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% lancement du rôle principal
environment()
