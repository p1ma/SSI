%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol
%% VARIANT: original version (of 1978) with key server
%% PURPOSE: Two-party mutual autentication
%% ALICE_BOB:
%% 1a. A ----------------------- {A.B} ----------> S
%% 1b. A <---------------------- {B.PKb}_inv(PKs) -- S
%% 1c. A -- {Na.A}_PKb ----> B
%% 2a.                      B -- {B.A} ----------> S
%% 2b.                      B <- {A.PKa}_inv(PKs) -- S
%% 2c. A <- {Na.Nb}_PKa ---- B
%% 3 . A -- {Nb}_PKb ------> B
%% PROBLEMS: 3
%% ATTACKS: Man-in-the-middle attack
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% HLPSL:
% Role of the initiator:
role alice (A, B: agent,             
            PKa, PKs: public_key,  
            KeyRing: (agent.public_key) set,
            Snd, Rcv: channel(dy))
played_by A def=

  local State: nat,
        Na, Nb: text,
        PKb: public_key

  init State:=0

  transition

   % Start, if alice must request bob's public key from key server
   ask.    State=0 /\ Rcv(start) /\ not(in(B.PKb', KeyRing))
       =|> State':=1 /\ Snd(A.B)

   % Receipt of response from key server
   learn.  State=1 /\ Rcv({B.PKb'}_inv(PKs))
       =|> State':=2 /\ KeyRing':=cons(B.PKb', KeyRing)
                     /\ Na':=new() /\ Snd({Na'.A}_PKb')
                     /\ secret(Na',sna,{A,B})
                     /\ witness(A,B,bob_alice_na,Na')

   % Start/resume, provided alice knows bob's public key
   knows.  State=0 /\ Rcv(start) /\ in(B.PKb', KeyRing)
       =|> State':=2 /\ Na':=new() /\ Snd({Na'.A}_PKb')
                     /\ secret(Na',sna,{A,B})
                     /\ witness(A,B,bob_alice_na,Na')

   cont.   State=2 /\ Rcv({Na.Nb'}_PKa) 
       =|> State':=3 /\ Snd({Nb'}_PKb)
	             /\ wrequest(A,B,alice_bob_nb,Nb')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Role of the receiver:
role bob(A, B: agent,      
         PKb, PKs: public_key,  
         KeyRing: (agent.public_key) set,
         Snd, Rcv: channel(dy))
played_by B def=

  local State: nat,
        Na, Nb: text, 
        PKa: public_key

  init State:=0

  transition 

   % Start if bob must request alice's public key from key server
   ask.    State=0 /\ Rcv({Na'.A}_PKb) /\ not(in(A.PKa', KeyRing))
       =|> State':=1 /\ Snd(B.A)

   % Receipt of response from key server
   learn.  State=1 /\ Rcv({A.PKa'}_inv(PKs))
       =|> State':=2 /\ KeyRing':=cons(A.PKa', KeyRing)
                     /\ Nb':=new() /\ Snd({Na.Nb'}_PKa')
                     /\ secret(Nb',snb,{A,B})
                     /\ witness(B,A,alice_bob_nb,Nb')

   % Start/resume, provided bob knows alice's public key
   knows.  State=0 /\ Rcv({Na'.A}_PKb) /\ in(A.PKa', KeyRing)
       =|> State':=2 /\ Nb':=new() /\ Snd({Na'.Nb'}_PKa')
                     /\ secret(Nb',snb,{A,B})
                     /\ witness(B,A,alice_bob_nb,Nb')

   cont.   State=2 /\ Rcv({Nb}_PKb) 
       =|> State':=3 /\ request(B,A,bob_alice_na,Na)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Role of the key server:
role server(S: agent,
            PKs: public_key,
            KeyMap: (agent.public_key) set,
            Snd, Rcv: channel(dy))
played_by S def=

  local X, Y: agent,
        State: nat,
	PKy: public_key

  transition
   % Loop on receiving a key request, and sending it
   req.   Rcv(X'.Y') /\ in(Y'.PKy', KeyMap)
       =|> Snd({Y'.PKy'}_inv(PKs))
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Role representing a partial session between alice and bob:
role nspk(A, B: agent,
          PKa, PKb, PKs: public_key,
          KeyMapA, KeyMapB: (agent.public_key) set,
          Snd, Rcv: channel(dy))
def=

  composition
     alice(A,B,PKa,PKs,KeyMapA,Snd,Rcv)
     /\ bob(A,B,PKb,PKs,KeyMapB,Snd,Rcv)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The main role:
role environment() def=

  local KeyMapS,KeyMapA,KeyMapB,KeyMapI: (agent.public_key) set,
        Snd, Rcv: channel(dy)

  const a, b, s, i: agent,
        pka, pkb, pki, pks: public_key,
        sna, snb, alice_bob_nb, bob_alice_na: protocol_id

  init KeyMapS:={a.pka, b.pkb, i.pki}
    /\ KeyMapA:={a.pka, b.pkb}
    /\ KeyMapB:={b.pkb}
    /\ KeyMapI:={i.pki}

  intruder_knowledge = {a, b, s, pks, pka, pkb, pki, inv(pki)}

  composition
     server(s,pks,KeyMapS,Snd,Rcv) % one unique server for all sessions
     /\ nspk(a,b,pka,pkb,pks,KeyMapA,KeyMapB,Snd,Rcv)
     /\ nspk(a,i,pka,pki,pks,KeyMapA,KeyMapI,Snd,Rcv)
     /\ nspk(i,b,pki,pkb,pks,KeyMapI,KeyMapB,Snd,Rcv)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Description of goal properties:
goal

  secrecy_of sna, snb % represented by the secret() predicate in the protocol
  weak_authentication_on alice_bob_nb % represented by the witness() and wrequest() predicates in the protocol
  authentication_on bob_alice_na % represented by the witness() and request() predicates in the protocol

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Call of the main role:
environment()
